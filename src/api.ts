/**
 * This file is auto-generated by the openapi zod client script.
 * DO NOT EDIT THIS FILE MANUALLY.
 */

import { apiUrl } from "@/config";
import { makeApi, Zodios } from "@zodios/core";
import { z } from "zod";

// Types
export type HTTPValidationError = Partial<{
  detail: Array<ValidationError>;
}>;
export type ValidationError = {
  loc: Array<(string | number) | Array<string | number>>;
  msg: string;
  type: string;
};
export type HarResponse = {
  type: HarType;
};
export type HarType =
  /**
   * The type of HAR (Human Activity Recognition) activity as label.
   *
   * @enum walking, running, shuffling, stairs_up, stairs_down, standing, sitting, lying, cycling_sit, cycling_stand, cycling_sit_inactive
   */
  | "walking"
  | "running"
  | "shuffling"
  | "stairs_up"
  | "stairs_down"
  | "standing"
  | "sitting"
  | "lying"
  | "cycling_sit"
  | "cycling_stand"
  | "cycling_sit_inactive";

// Schemas
const HTTPErrorResponse = z.object({ detail: z.string() }).strict();
export type HTTPErrorResponse = z.infer<typeof HTTPErrorResponse>;

const ValidationError: z.ZodType<ValidationError> = z
  .object({
    loc: z.array(z.union([z.string(), z.number()])),
    msg: z.string(),
    type: z.string(),
  })
  .strict();

const HTTPValidationError: z.ZodType<HTTPValidationError> = z
  .object({ detail: z.array(ValidationError) })
  .partial()
  .strict();

const HarRequest = z
  .object({
    back_x: z.number().gte(-30).lte(30).describe("Back X acceleration"),
    back_y: z.number().gte(-30).lte(30).describe("Back Y acceleration"),
    back_z: z.number().gte(-30).lte(30).describe("Back Z acceleration"),
    thigh_x: z.number().gte(-30).lte(30).describe("Thigh X acceleration"),
    thigh_y: z.number().gte(-30).lte(30).describe("Thigh Y acceleration"),
    thigh_z: z.number().gte(-30).lte(30).describe("Thigh Z acceleration"),
  })
  .strict();
export type HarRequest = z.infer<typeof HarRequest>;

const HarType: z.ZodType<HarType> = z.enum([
  "walking",
  "running",
  "shuffling",
  "stairs_up",
  "stairs_down",
  "standing",
  "sitting",
  "lying",
  "cycling_sit",
  "cycling_stand",
  "cycling_sit_inactive",
]);

const HarResponse: z.ZodType<HarResponse> = z
  .object({
    type: HarType.describe(
      "The type of HAR (Human Activity Recognition) activity as label.",
    ),
  })
  .strict();

export const schemas = {
  HTTPErrorResponse,
  ValidationError,
  HTTPValidationError,
  HarRequest,
  HarType,
  HarResponse,
};

// Apis
const notebookEndpoints = makeApi([
  {
    method: "get",
    path: "/api/notebook/:file_path",
    alias: "getNotebookFile",
    description: `Retrieve a notebook file.`,
    requestFormat: "json",
    parameters: [
      {
        name: "file_path",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.unknown(),
    errors: [
      {
        status: 400,
        description: `Invalid file path`,
        schema: z.object({ detail: z.string() }).strict(),
      },
      {
        status: 404,
        description: `File not found`,
        schema: z.object({ detail: z.string() }).strict(),
      },
      {
        status: 422,
        description: `Validation Error`,
        schema: HTTPValidationError,
      },
    ],
  },
]);
export const notebookApi = new Zodios(apiUrl, notebookEndpoints);
notebookApi.axios.interceptors.request.use((config) => {
  // Get the cookie `jwt` from the browser
  const jwt = config.headers?.Cookie?.split("; ").find((c: string) =>
    c.startsWith("jwt="),
  );

  if (jwt) {
    // Set the `Authorization` header with the JWT token
    config.headers.Authorization = `Bearer ${jwt.split("=")[1]}`;
  }

  return config;
});

const harEndpoints = makeApi([
  {
    method: "post",
    path: "/api/har",
    alias: "postPredictHar",
    description: `Predict the type of HAR activity based on accelerometer readings.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: HarRequest,
      },
    ],
    response: HarResponse,
    errors: [
      {
        status: 422,
        description: `Validation Error`,
        schema: HTTPValidationError,
      },
    ],
  },
]);
export const harApi = new Zodios(apiUrl, harEndpoints);
harApi.axios.interceptors.request.use((config) => {
  // Get the cookie `jwt` from the browser
  const jwt = config.headers?.Cookie?.split("; ").find((c: string) =>
    c.startsWith("jwt="),
  );

  if (jwt) {
    // Set the `Authorization` header with the JWT token
    config.headers.Authorization = `Bearer ${jwt.split("=")[1]}`;
  }

  return config;
});
